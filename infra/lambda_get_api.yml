AWSTemplateFormatVersion: 2010-09-09
Description: Temperature API Gateway and Lambda function

Parameters:
  apiGatewayName:
    Type: String
    Default: temperatures
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev
  apiGatewayHTTPMethodPost:
    Type: String
    Default: POST
  lambdaFunctionNamePost:
    Type: String
    Default: lambda_insert_temperature
  LambdaRoleCustomized:
    Type: String
    Default: arn:aws:iam::373641468960:role/lambdaRoleExecutionGcfhfbjCustomized
  ScriptPythonPost:
    Type: String
    Default: lambda/insert_temperature/insert_temperatura_api-0.0.1-py3.9.egg
  ScriptBucket:
    Type: String
    Default: bk-scripts-python
  apiGatewayHTTPMethodGet:
    Type: String
    Default: GET
  lambdaFunctionNameGet:
    Type: String
    Default: lambda_get_temperature
  ScriptPythonGet:
    Type: String
    Default: lambda/get_temperature/get_temperatura_api-0.0.1-py3.9.egg

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Temperature API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethodPost
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunctionPost.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: { "application/json": "$input.json('$.body')" }
          - StatusCode: 400
            ResponseTemplates: { "application/json": "$input.json('$.body')" }
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
        - StatusCode: 400
          ResponseModels: { "application/json": "Empty" }

  apiGatewayRootMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethodGet
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunctionGet.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: { "application/json": "$input.json('$.body')" }
          - StatusCode: 400
            ResponseTemplates: { "application/json": "$input.json('$.body')" }
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
        - StatusCode: 400
          ResponseModels: { "application/json": "Empty" }

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethodPost
      - apiGatewayRootMethodGet
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaFunctionPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ScriptBucket
        S3Key: !Ref ScriptPythonPost
      Description: Insert Lambda function
      FunctionName: !Ref lambdaFunctionNamePost
      Handler: app.lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref LambdaRoleCustomized
      Runtime: python3.9

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunctionPost.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethodPost}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethodPost}/

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionNamePost}
      RetentionInDays: 30

  lambdaFunctionGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ScriptBucket
        S3Key: !Ref ScriptPythonGet
      Description: Insert Lambda function
      FunctionName: !Ref lambdaFunctionNameGet
      Handler: app.lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref LambdaRoleCustomized
      Runtime: python3.9

  lambdaApiGatewayInvokeGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunctionGet.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethodGet}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethodGet}/

  lambdaLogGroupGet:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionNameGet}
      RetentionInDays: 30

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt lambdaFunctionPost.Arn

  lambdaArnGet:
    Value: !GetAtt lambdaFunctionGet.Arn
